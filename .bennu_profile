WORKSPACE_DIR=/home/sfbs/workspace/svn/
LOG_FILE=/tmp/poms
LOGS_DIR=/home/sfbs/logs
APP=dot


#Fenix Sync - syncs changed jsps to target dir
function fsync() {
	changes=`diff -r src/main/webapp/ target/fenix-maven-1.0-SNAPSHOT/ | grep ^diff`;
	echo $changes;
	`echo $changes | sed 's/diff -r/cp/g'`;
}
function check() {
	OUTPUT=`cat $LOG_FILE | grep "/$1/"`
	if [ -z "$OUTPUT" ]; then
		echo "$1 is not a module."
		return 1;
	fi
	POM=`realpath $OUTPUT`
	DIR=`echo $POM | sed 's/\/pom.xml//'`
	echo $DIR;
}

function goto() {
	OUTPUT=`cat $LOG_FILE | grep "/$1/"`
	if [ -z "$OUTPUT" ]; then
		echo "$1 is not a module."
		return 1;
	fi
	POM=`realpath $OUTPUT`
	DIR=`echo $POM | sed 's/\/pom.xml//'`
	cd $DIR
}

function loadDirs() {
	if [ ! -e $LOG_FILE ]; then
		echo "fill poms file $LOG_FILE"
		find $WORKSPACE_DIR -name 'pom.xml' > $LOG_FILE
		echo "done $LOG_FILE."
	fi
}

function cptom() {
	CWD=`basename $PWD`
	rm $CATALINA_HOME/webapps/$APP/WEB-INF/lib/$CWD*.jar
	cp target/$CWD*.jar $CATALINA_HOME/webapps/$APP/WEB-INF/lib/
	echo "cp target/$CWD*.jar $CATALINA_HOME/webapps/$APP/WEB-INF/lib/"
}

_goto() {
	local cur prev opts
	loadDirs
	dirs=`cat $LOG_FILE | sed 's/\/pom.xml//g'`
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts=`for d in $dirs; do basename $d; done`
	COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
}

complete -F _goto goto

xpto () {
	CWD=`basename $PWD`;
	echo $CWD;	
}

doFollowing () {
    doOffline=false;
    if $doOffline
        then 
          echo do offline 1st if
        fi
    if [[ "$@" == -* ]]
        then
            #echo found a -
            if [[ "$@" == -o\ * ]]
                then
                    #echo "got a full -o with a space"
                    doOffline=true;
                else 
                    echo Usage:
                    echo $0 [-o] module1 [...module2 moduleN]
                    echo compiles the given modules with mvn clean install.
                    echo if the optional argument -o is given, the param -o is passed to mvn, so that it operates offline
                    return;
                fi
        fi
        
        if $doOffline
           then
              #echo do offline 2nd if
              mvnCommand="mvn -o clean install"
           else 
              mvnCommand="mvn clean install"
           fi
        for argument in "$@"
        do
            if [[ $argument == -* ]]
                then
                    echo "$argument" ignored as it starts with a -;
                else 
                    echo compiling "$argument" with "$mvnCommand";
                    if goto $argument && $mvnCommand;
                        then
                          echo "** $argument compilation successfull **"
                        else
                          echo "** failed to compile $argument. Arguments were $@ **"
                          return 1;
                        fi
                fi
        done

        return;
}

dodeps() {
	loadDirs
	LOCALMODULE=`basename $PWD`;
	DATE=`date +%y%m%d_%H%M%S`;
	LOG_DIR="$LOGS_DIR/$LOCALMODULE/$DATE";
	echo "create $LOG_DIR";
	mkdir -p $LOG_DIR;
	#if [ "$1" == "i" ]; then
	#	IGNORE=`ls -1  | sed 's/\(.*\)\.log/\1/g'`;
	#	echo "ignoring $IGNORE .";
	#else
	#	echo "don't ignore anything."
	#fi
	MODULE=`mvn dependency:list  | grep -e '^\[.*\].*$' | grep -o -e "pt.ist:.*$" | sed 's/^pt.ist:\(.*\):jar.*$/\1/g'`
	for module in $MODULE; do
		if [[ ! -z "$IGNORE" ]] && [[ "$IGNORE" == *"$module"* ]] ; then
			echo "skipping $module";
			continue;
		fi
		echo "clean installing $module";
		goto $module;
		if [ $? == 0 ] ; then
			echo "building $module";
			date >> $LOG_DIR/$module.log;
			mvn clean install &>> $LOG_DIR/$module.log;
			if [ $? == 0 ] ; then
				echo "$module built successfully" &>> $LOG_DIR/$module.log;
				echo "$module built successfully.";
			else
				echo "$module failed." &>> $LOG_DIR/$module.log;
				echo "$module failed.";
			fi
		else
			echo "Couldn't goto $module";
		fi 
	done
	goto $LOCALMODULE;
	unset LOCALMODULE;
	unset DATE;
	unset LOG_DIR;
	unset MODULE;
}

doall() {
	rm -rf $LOGS_DIR/*.log
	loadDirs
	DIRS=`cat $LOG_FILE | sed 's/\/pom.xml//g'`
	MODULES=`for d in $DIRS; do basename $d; done`
	for module in $MODULES; do
		echo "goto $module";
		goto $module;
		if [ $? == 0 ] ; then
			echo "building $module";
			date &>> ~/logs/$module.log;
			mvn clean install &>> ~/logs/$module.log;
			if [ $? == 0 ] ; then
				echo "$module built successfully." &>> ~/logs/$module.log;
				echo "$module built successfully.";
			else
				echo "$module failed." &>> ~/logs/$module.log;
				echo "$module failed.";
			fi
		else
			echo "Couldn't goto $module";
		fi
	done
	unset DIRS
	unset MODULES
}

doallclean() {
	loadDirs
	DIRS=`cat $LOG_FILE | sed 's/\/pom.xml//g'`
	MODULES=`for d in $DIRS; do basename $d; done`
	for module in $MODULES; do
		echo "goto $module";
		goto $module;
		if [ $? == 0 ] ; then
			echo "mvn clean $module";
			mvn clean;
		else
			echo "Couldn't goto $module";
		fi
	done
	unset DIRS
	unset MODULES
}

echo "bennu_profile loaded";
